# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API

    OpenAPI spec version: 1.0.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Subscriber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, name=None, subscribed=None, tags=None):
        """
        Subscriber - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'name': 'str',
            'subscribed': 'datetime',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'email': 'email',
            'name': 'name',
            'subscribed': 'subscribed',
            'tags': 'tags'
        }

        self._email = email
        self._name = name
        self._subscribed = subscribed
        self._tags = tags

    @property
    def email(self):
        """
        Gets the email of this Subscriber.


        :return: The email of this Subscriber.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Subscriber.


        :param email: The email of this Subscriber.
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """
        Gets the name of this Subscriber.


        :return: The name of this Subscriber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Subscriber.


        :param name: The name of this Subscriber.
        :type: str
        """

        self._name = name

    @property
    def subscribed(self):
        """
        Gets the subscribed of this Subscriber.


        :return: The subscribed of this Subscriber.
        :rtype: datetime
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """
        Sets the subscribed of this Subscriber.

        :param subscribed: The subscribed of this Subscriber.
        :type: list[datetime]
        """

        self._subscribed = subscribed

    @property
    def tags(self):
        """
        Gets the tags of this Subscriber.


        :return: The tags of this Subscriber.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Subscriber.


        :param tags: The tags of this Subscriber.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Subscriber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
